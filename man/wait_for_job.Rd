% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/wait_for_job.R
\name{wait_for_job}
\alias{wait_for_job}
\title{This function pauses execution of an R script while a scheduled qsub job is not yet complete.}
\usage{
wait_for_job(
  job_ids,
  sleep_interval = 30,
  max_wait = 60 * 60 * 24,
  scheduler = "local",
  quiet = TRUE,
  stop_on_timeout = TRUE
)
}
\arguments{
\item{job_ids}{One or more job ids of existing PBS or slurm jobs, or process ids of a local process for
\code{scheduler="sh"}.}

\item{sleep_interval}{How often to recheck the job status, in seconds. Default: 30}

\item{max_wait}{How long to wait on the job before giving up, in seconds. Default: 24 hours (86,400 seconds)}

\item{scheduler}{What scheduler is used for job execution.
Options: c("torque", "qsub", "slurm", "sbatch", "sh", "local")}

\item{quiet}{If \code{TRUE}, \code{wait_for_job} will not print out any status updates on jobs. If \code{FALSE},
the function prints out status updates for each tracked job so that the user knows what's holding up progress.}
}
\value{
Nothing. Just returns when the blocking job completes.
}
\description{
It is intended to give you control over job dependencies within R when the formal PBS
depend approach is insufficient, especially in the case of a script that spawns child jobs that
need to be scheduled or complete before the parent script should continue.
}
\details{
Note that for the \code{scheduler} argument, "torque" and "qsub" are the same;
  "slurm" and "sbatch" are the same, and "sh" and "local" are the same.
}
\examples{
\dontrun{
# example on qsub/torque cluster
wait_for_job('7968857.torque01.util.production.int.aci.ics.psu.edu', scheduler="torque")

# example of waiting for two jobs on slurm cluster
wait_for_job(c('24147864', '24147876'), scheduler="slurm")

# example of waiting for two jobs on local machine
wait_for_job(c('9843', '9844'), scheduler="local")
}

}
\author{
Michael Hallquist
}
