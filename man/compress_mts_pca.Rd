% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/event_lock_timeseries.R
\name{compress_mts_pca}
\alias{compress_mts_pca}
\title{Core function for computing multivariate time series compression scores by principal components}
\usage{
compress_mts_pca(mts, pexp_target = 0.9, scale_columns = TRUE)
}
\arguments{
\item{mts}{multivariate time series structured time x signals}

\item{pexp_target}{Proportion of variance explained by principal components. This can be a vector,
in which case compression is calculated at different thresholds.}

\item{scale_columns}{whether to z-score the time series prior to eigendecomposition (recommended)}
}
\value{
a list containing compression estimates of the matrix. For each pexp_target value, two values are included,
 one representing the compression calculated using integer
}
\description{
Core function for computing multivariate time series compression scores by principal components
}
\details{
This function accepts a time x signals (e.g., voxels) time series matrix. It computes the
  singular value decomposition (SVD) and then examines how many eigenvectors are needed to explain at least
  \code{pexp_target} proportion of variance.

Compression scores are normalized 0 -- 1.0 by the equation: 1 - (n_components / n_timeseries). Thus,
  if 6 components explain 91% of the variance in a 12-time series matrix, then the compression score is 0.5.

Given that the number of eigenvectors is an integer, a linear approximation to the exact proportion of variance
  explained is also calculated. For example, if 3 components explain 84% of variance, while 4 components explain
  92%, we 'overshoot' our target of 90% slightly with 4 components. We can then calculated how much compression would
  get us to precisely 90% by linear interpolation.
}
\author{
Michael Hallquist
}
